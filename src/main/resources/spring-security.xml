<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">

    <beans:description>SpringSecurity安全配置</beans:description>
    <!-- http安全配置 -->
    <!--<http use-expressions="true" auto-config="false"
          entry-point-ref="authenticationEntryPoint" name="empire"
          authentication-manager-ref="authenticationManager">
        &lt;!&ndash; session过滤器 &ndash;&gt;
        <custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />
        &lt;!&ndash; <intercept-url pattern="/static/**" access="permitAll" /> &ndash;&gt;
        <intercept-url pattern="/**/*.jpg" access="permitAll" />
        <intercept-url pattern="/**/*.png" access="permitAll" />
        <intercept-url pattern="/**/*.gif" access="permitAll" />
        <intercept-url pattern="/**/*.css" access="permitAll" />
        <intercept-url pattern="/**/*.js" access="permitAll" />
        &lt;!&ndash; 尝试访问没有权限的页面时跳转的页面 &ndash;&gt;
        <access-denied-handler error-page="/static/403.html" />
        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
        &lt;!&ndash; ajax登录过滤器 &ndash;&gt;
        &lt;!&ndash; <custom-filter before="FORM_LOGIN_FILTER" ref="ajaxLoginFilter" /> &ndash;&gt;
        <custom-filter position="FORM_LOGIN_FILTER" ref="adminAjaxLoginFilter" />
        &lt;!&ndash; <custom-filter after="FORM_LOGIN_FILTER" ref="loginFilter" /> &ndash;&gt;
        <headers>
            <frame-options policy="SAMEORIGIN"></frame-options>
        </headers>
        &lt;!&ndash; 只cache get,避免ajax post 被cache &ndash;&gt;
        <request-cache ref="httpSessionRequestCache" />
        <session-management
                session-authentication-strategy-ref="sessionAuthenticationStrategy" />
        &lt;!&ndash; 注销过滤器 &ndash;&gt;
        &lt;!&ndash; <logout invalidate-session="true" logout-success-url="/admin/login.html?logout=true"
            logout-url="/j_spring_security_logout" /> &ndash;&gt;
        &lt;!&ndash; 启用安全策略 &ndash;&gt;
        <csrf disabled="false" token-repository-ref="csrfTokenRepository"
              request-matcher-ref="csrfSecurityRequestMatcher" />
        <custom-filter ref="rememberMeFilter" position="REMEMBER_ME_FILTER" />
        <custom-filter ref="logoutFilter" position="LOGOUT_FILTER" />
        <access-denied-handler ref="accessDeniedHandler" />
    </http>
    <beans:bean id="csrfSecurityRequestMatcher"
                class="pn.empire.security.handler.CsrfSecurityRequestMatcher">
        <beans:property name="execludeUrls">
            <beans:list>
                <beans:value>/workorder/adminuploadattachment.html</beans:value>
                <beans:value>/face/</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>
    &lt;!&ndash; &ndash;&gt;
    <beans:bean id="accessDeniedHandler"
                class="pn.empire.security.handler.AccessDeniedHandlerImpl">
        <beans:property name="errorPage" value="/static/405.html"></beans:property>
    </beans:bean>
    &lt;!&ndash;remember-me拦截器 &ndash;&gt;
    <beans:bean id="rememberMeFilter"
                class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
        <beans:constructor-arg ref="authenticationManager" />
        <beans:constructor-arg ref="rememberMeServices" />
    </beans:bean>
    <beans:bean id="rememberMeServices"
                class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
        <beans:constructor-arg value="key" />
        <beans:constructor-arg ref="userDetailsService" />
        <beans:constructor-arg ref="tokenRepository" />
        <beans:property name="tokenValiditySeconds" value="604800" />
    </beans:bean>

    <beans:bean id="tokenRepository"
                class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl">
        <beans:property name="dataSource" ref="dataSourceMysql" />
        &lt;!&ndash; <beans:property name="createTableOnStartup" value="true"/> &ndash;&gt; &lt;!&ndash; 是否在系统启动时创建持久化token的数据库表 &ndash;&gt;
    </beans:bean>

    <beans:bean id="rememberMeAuthenticationProvider"
                class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
        <beans:constructor-arg value="key" />
    </beans:bean>
    &lt;!&ndash;remember-me拦截器 end &ndash;&gt;
    &lt;!&ndash;登出拦截器 &ndash;&gt;
    <beans:bean id="logoutFilter"
                class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <beans:constructor-arg value="/admin/unlogin.html?logout=true" />
        <beans:property name="filterProcessesUrl" value="/j_spring_security_logout" />
        <beans:constructor-arg>
            <beans:list>
                <beans:ref bean="rememberMeServices" />
                <beans:bean
                        class="org.springframework.security.web.csrf.CsrfLogoutHandler">
                    <beans:constructor-arg ref="csrfTokenRepository" />
                </beans:bean>
                <beans:bean
                        class="org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler">
                    <beans:constructor-arg index="0">
                        <beans:array>
                            <beans:value>JSESSIONID</beans:value>
                            <beans:value>remember-me</beans:value>
                        </beans:array>
                    </beans:constructor-arg>
                </beans:bean>
                <beans:bean
                        class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>
    <beans:bean id="csrfTokenRepository"
                class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository" />



    &lt;!&ndash; session 控制 &ndash;&gt;
    <beans:bean id="concurrencyFilter"
                class="pn.empire.security.filter.ConcurrentSessionFilter">
        <beans:constructor-arg ref="sessionRegistry" />
        <beans:constructor-arg value="/static/406.html" />
    </beans:bean>
    <beans:bean id="sessionAuthenticationStrategy"
                class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean
                        class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
                    <beans:constructor-arg ref="sessionRegistry" />
                    <beans:property name="maximumSessions" value="1" />
                    <beans:property name="exceptionIfMaximumExceeded"
                                    value="false" />
                </beans:bean>
                <beans:bean
                        class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy" />
                <beans:bean
                        class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
                    <beans:constructor-arg ref="sessionRegistry" />
                </beans:bean>
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>
    <beans:bean id="sessionRegistry"
                class="org.springframework.security.core.session.SessionRegistryImpl" />
    &lt;!&ndash; session 控制 end &ndash;&gt;
    &lt;!&ndash; 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
        我们的所有控制将在这三个类中实现，解释详见具体配置 &ndash;&gt;
    <beans:bean id="myFilter"
                class="pn.empire.security.filter.SecurityInterceptorFilter">
        <beans:property name="authenticationManager" ref="authenticationManager" />
        <beans:property name="accessDecisionManager" ref="accessDecisionManager" />
        <beans:property name="securityMetadataSource" ref="securityMetadataSource" />
    </beans:bean>
    <beans:bean id="authSuccess"
                class="pn.empire.security.handler.AuthenticationSuccessHandler" />
    <beans:bean id="logoutSuccessHandler"
                class="pn.empire.security.handler.LogoutSuccessHandler" />
    &lt;!&ndash; 验证配置 ， 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 &ndash;&gt;
    <authentication-manager alias="authenticationManager"
                            erase-credentials="false">
        <authentication-provider user-service-ref="userDetailsService">
            &lt;!&ndash; 登入 密码 采用MD5加密 &ndash;&gt;
            <password-encoder ref="passwordEncoder"/>
        </authentication-provider>
        <authentication-provider ref="rememberMeAuthenticationProvider" />
    </authentication-manager>
    <beans:bean id="passwordEncoder" class="pn.empire.security.handler.PwdEncodeHandler" />
    &lt;!&ndash; 项目实现的用户查询服务,将用户信息查询出来 &ndash;&gt;
    <beans:bean id="userDetailsService"
                class="pn.empire.security.service.impl.UserDetailServiceImpl" />
    &lt;!&ndash; 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 &ndash;&gt;
    <beans:bean id="accessDecisionManager"
                class="pn.empire.security.service.impl.AccessDecisionManager" />
    &lt;!&ndash; 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 &ndash;&gt;
    <beans:bean id="securityMetadataSource"
                class="pn.empire.security.service.impl.InvocationSecurityMetadataSource" />

    <beans:bean id="messageSource"
                class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <beans:property name="basename"
                        value="classpath:org/springframework/security/messages_zh_CN" />
    </beans:bean>
    <beans:bean id="authenticationEntryPoint"
                class="pn.empire.security.service.impl.AuthenticationEntryPoint">
        <beans:constructor-arg name="loginFormUrl"
                               value="/admin/unlogin.html?entrypoint" />
    </beans:bean>
    &lt;!&ndash; 验证ajax请求 &ndash;&gt;
    <beans:bean id="ajaxLoginFilter"
                class="pn.empire.security.filter.UsernamePasswordFilter">
        <beans:property name="authenticationManager" ref="authenticationManager" />
        <beans:property name="authenticationFailureHandler"
                        ref="ajaxFailureHandler" />
        <beans:property name="authenticationSuccessHandler"
                        ref="ajaxSuccessHandler" />
        <beans:property name="filterProcessesUrl" value="/ajaxLoginProcess" />
        <beans:property name="sessionAuthenticationStrategy"
                        ref="sessionAuthenticationStrategy" />
    </beans:bean>
    <beans:bean id="ajaxFailureHandler"
                class="pn.empire.security.handler.AjaxAuthenticationFailureHandler">
    </beans:bean>
    <beans:bean id="ajaxSuccessHandler"
                class="pn.empire.security.handler.AjaxAuthenticationSuccessHandler">
    </beans:bean>
    &lt;!&ndash; 验证admin ajax请求 &ndash;&gt;
    <beans:bean id="adminAjaxLoginFilter"
                class="pn.empire.security.filter.UsernamePasswordFilter">
        <beans:property name="authenticationManager" ref="authenticationManager" />
        <beans:property name="authenticationFailureHandler"
                        ref="adminAjaxFailureHandler" />
        <beans:property name="authenticationSuccessHandler"
                        ref="adminAjaxSuccessHandler" />
        <beans:property name="filterProcessesUrl" value="/adminAjaxLoginProcess" />
        <beans:property name="sessionAuthenticationStrategy"
                        ref="sessionAuthenticationStrategy" />
        <beans:property name="rememberMeServices" ref="rememberMeServices" />
    </beans:bean>
    <beans:bean id="adminAjaxFailureHandler"
                class="pn.empire.security.handler.AdminAjaxAuthenticationFailureHandler">
    </beans:bean>
    <beans:bean id="adminAjaxSuccessHandler"
                class="pn.empire.security.handler.AdminAjaxAuthenticationSuccessHandler">
    </beans:bean>
    &lt;!&ndash; 验证普通用户 &ndash;&gt;
    <beans:bean id="loginFilter"
                class="pn.empire.security.filter.UsernamePasswordFilter">
        <beans:property name="authenticationManager" ref="authenticationManager" />
        <beans:property name="authenticationFailureHandler"
                        ref="failureHandler" />
        <beans:property name="authenticationSuccessHandler"
                        ref="authSuccess" /> &lt;!&ndash; ref="successHandler"/> &ndash;&gt;
        <beans:property name="filterProcessesUrl" value="/loginProcess" />
        <beans:property name="sessionAuthenticationStrategy"
                        ref="sessionAuthenticationStrategy" />
    </beans:bean>

    <beans:bean id="failureHandler"
                class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <beans:property name="defaultFailureUrl" value="/admin/login.html?login_error=1" />
    </beans:bean>

    <beans:bean id="successHandler"
                class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <beans:property name="alwaysUseDefaultTargetUrl" value="false" />
        <beans:property name="defaultTargetUrl" value="/" />
    </beans:bean>
    <beans:bean id="httpSessionRequestCache"
                class="org.springframework.security.web.savedrequest.HttpSessionRequestCache">
    </beans:bean>-->

</beans:beans>